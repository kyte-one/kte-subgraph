// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimReturns extends ethereum.Event {
  get params(): ClaimReturns__Params {
    return new ClaimReturns__Params(this);
  }
}

export class ClaimReturns__Params {
  _event: ClaimReturns;

  constructor(event: ClaimReturns) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalReturns(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get participationAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DistributeMarketFee extends ethereum.Event {
  get params(): DistributeMarketFee__Params {
    return new DistributeMarketFee__Params(this);
  }
}

export class DistributeMarketFee__Params {
  _event: DistributeMarketFee;

  constructor(event: DistributeMarketFee) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get awardType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PlacePrediction extends ethereum.Event {
  get params(): PlacePrediction__Params {
    return new PlacePrediction__Params(this);
  }
}

export class PlacePrediction__Params {
  _event: PlacePrediction;

  constructor(event: PlacePrediction) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get prediction(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get positions(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get leverage(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get marketFeed(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class SettleMarket extends ethereum.Event {
  get params(): SettleMarket__Params {
    return new SettleMarket__Params(this);
  }
}

export class SettleMarket__Params {
  _event: SettleMarket;

  constructor(event: SettleMarket) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get settler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winningPool(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get rewardPool(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get creatorReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get platformReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get settlerReward(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get usersRewardPool(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class Market__assetResult {
  value0: Bytes;
  value1: Address;
  value2: i32;
  value3: i32;
  value4: boolean;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: i32,
    value3: i32,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Market__claimReturnsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Market__feesPercentageResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Market__getMarketResultValue1Struct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class Market__getMarketResultValue2Struct extends ethereum.Tuple {
  get creationTime(): BigInt {
    return this[0].toBigInt();
  }

  get tradingEndTime(): BigInt {
    return this[1].toBigInt();
  }

  get waitingEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get reportingEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get disputeEndTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class Market__getMarketResultValue3Struct extends ethereum.Tuple {
  get upper(): BigInt {
    return this[0].toBigInt();
  }

  get lower(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get participants(): BigInt {
    return this[3].toBigInt();
  }

  get positions(): BigInt {
    return this[4].toBigInt();
  }

  get rewards(): BigInt {
    return this[5].toBigInt();
  }
}

export class Market__getMarketResult {
  value0: Address;
  value1: Market__getMarketResultValue1Struct;
  value2: Market__getMarketResultValue2Struct;
  value3: Array<Market__getMarketResultValue3Struct>;
  value4: i32;

  constructor(
    value0: Address,
    value1: Market__getMarketResultValue1Struct,
    value2: Market__getMarketResultValue2Struct,
    value3: Array<Market__getMarketResultValue3Struct>,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromTupleArray(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class Market__getMarketEntityResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class Market__getMarketTimeResultValue0Struct extends ethereum.Tuple {
  get creationTime(): BigInt {
    return this[0].toBigInt();
  }

  get tradingEndTime(): BigInt {
    return this[1].toBigInt();
  }

  get waitingEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get reportingEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get disputeEndTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class Market__getMarketUserResultValue0Struct extends ethereum.Tuple {
  get numberOfPredictions(): i32 {
    return this[0].toI32();
  }

  get returnsClaimed(): boolean {
    return this[1].toBoolean();
  }

  get boostModeApplied(): boolean {
    return this[2].toBoolean();
  }

  get predictions(): Array<Market__getMarketUserResultValue0PredictionsStruct> {
    return this[3].toTupleArray<
      Market__getMarketUserResultValue0PredictionsStruct
    >();
  }

  get user(): Address {
    return this[4].toAddress();
  }
}

export class Market__getMarketUserResultValue0PredictionsStruct extends ethereum.Tuple {
  get positions(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get leverage(): i32 {
    return this[2].toI32();
  }
}

export class Market__getUserTotalReturnsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Market__marketFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Market__marketUsersResult {
  value0: boolean;
  value1: boolean;
  value2: i32;

  constructor(value0: boolean, value1: boolean, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class Market__poolsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  LC(): BigInt {
    let result = super.call("LC", "LC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("LC", "LC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  asset(): Market__assetResult {
    let result = super.call(
      "asset",
      "asset():(bytes32,address,uint8,uint8,bool)",
      []
    );

    return new Market__assetResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBoolean()
    );
  }

  try_asset(): ethereum.CallResult<Market__assetResult> {
    let result = super.tryCall(
      "asset",
      "asset():(bytes32,address,uint8,uint8,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__assetResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBoolean()
      )
    );
  }

  claimReturns(_user: Address): Market__claimReturnsResult {
    let result = super.call(
      "claimReturns",
      "claimReturns(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new Market__claimReturnsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_claimReturns(
    _user: Address
  ): ethereum.CallResult<Market__claimReturnsResult> {
    let result = super.tryCall(
      "claimReturns",
      "claimReturns(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__claimReturnsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feesPercentage(): Market__feesPercentageResult {
    let result = super.call(
      "feesPercentage",
      "feesPercentage():(uint256,uint256,uint256)",
      []
    );

    return new Market__feesPercentageResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_feesPercentage(): ethereum.CallResult<Market__feesPercentageResult> {
    let result = super.tryCall(
      "feesPercentage",
      "feesPercentage():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__feesPercentageResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  gateway(): Address {
    let result = super.call("gateway", "gateway():(address)", []);

    return result[0].toAddress();
  }

  try_gateway(): ethereum.CallResult<Address> {
    let result = super.tryCall("gateway", "gateway():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarket(): Market__getMarketResult {
    let result = super.call(
      "getMarket",
      "getMarket():(address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)",
      []
    );

    return new Market__getMarketResult(
      result[0].toAddress(),
      result[1].toTuple() as Market__getMarketResultValue1Struct,
      result[2].toTuple() as Market__getMarketResultValue2Struct,
      result[3].toTupleArray<Market__getMarketResultValue3Struct>(),
      result[4].toI32()
    );
  }

  try_getMarket(): ethereum.CallResult<Market__getMarketResult> {
    let result = super.tryCall(
      "getMarket",
      "getMarket():(address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__getMarketResult(
        value[0].toAddress(),
        value[1].toTuple() as Market__getMarketResultValue1Struct,
        value[2].toTuple() as Market__getMarketResultValue2Struct,
        value[3].toTupleArray<Market__getMarketResultValue3Struct>(),
        value[4].toI32()
      )
    );
  }

  getMarketEntity(): Market__getMarketEntityResult {
    let result = super.call(
      "getMarketEntity",
      "getMarketEntity():(address,address,address,address)",
      []
    );

    return new Market__getMarketEntityResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_getMarketEntity(): ethereum.CallResult<Market__getMarketEntityResult> {
    let result = super.tryCall(
      "getMarketEntity",
      "getMarketEntity():(address,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__getMarketEntityResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  getMarketPhase(): i32 {
    let result = super.call("getMarketPhase", "getMarketPhase():(uint8)", []);

    return result[0].toI32();
  }

  try_getMarketPhase(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getMarketPhase",
      "getMarketPhase():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getMarketTime(): Market__getMarketTimeResultValue0Struct {
    let result = super.call(
      "getMarketTime",
      "getMarketTime():((uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return result[0].toTuple() as Market__getMarketTimeResultValue0Struct;
  }

  try_getMarketTime(): ethereum.CallResult<
    Market__getMarketTimeResultValue0Struct
  > {
    let result = super.tryCall(
      "getMarketTime",
      "getMarketTime():((uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__getMarketTimeResultValue0Struct
    );
  }

  getMarketUser(_user: Address): Market__getMarketUserResultValue0Struct {
    let result = super.call(
      "getMarketUser",
      "getMarketUser(address):((uint24,bool,bool,(uint256,uint256,uint8)[],address))",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toTuple() as Market__getMarketUserResultValue0Struct;
  }

  try_getMarketUser(
    _user: Address
  ): ethereum.CallResult<Market__getMarketUserResultValue0Struct> {
    let result = super.tryCall(
      "getMarketUser",
      "getMarketUser(address):((uint24,bool,bool,(uint256,uint256,uint8)[],address))",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__getMarketUserResultValue0Struct
    );
  }

  getPoolPrice(_prediction: i32): BigInt {
    let result = super.call("getPoolPrice", "getPoolPrice(uint8):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction))
    ]);

    return result[0].toBigInt();
  }

  try_getPoolPrice(_prediction: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPoolPrice", "getPoolPrice(uint8):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolsPrice(): Array<BigInt> {
    let result = super.call("getPoolsPrice", "getPoolsPrice():(uint64[])", []);

    return result[0].toBigIntArray();
  }

  try_getPoolsPrice(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPoolsPrice",
      "getPoolsPrice():(uint64[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPositions(_prediction: i32, _amount: BigInt, _leverage: i32): BigInt {
    let result = super.call(
      "getPositions",
      "getPositions(uint8,uint256,uint8):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction)),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositions(
    _prediction: i32,
    _amount: BigInt,
    _leverage: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositions",
      "getPositions(uint8,uint256,uint8):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction)),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStaked(): BigInt {
    let result = super.call("getTotalStaked", "getTotalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStaked",
      "getTotalStaked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserTotalReturns(_user: Address): Market__getUserTotalReturnsResult {
    let result = super.call(
      "getUserTotalReturns",
      "getUserTotalReturns(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return new Market__getUserTotalReturnsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUserTotalReturns(
    _user: Address
  ): ethereum.CallResult<Market__getUserTotalReturnsResult> {
    let result = super.tryCall(
      "getUserTotalReturns",
      "getUserTotalReturns(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__getUserTotalReturnsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  marketFees(): Market__marketFeesResult {
    let result = super.call(
      "marketFees",
      "marketFees():(uint256,uint256,uint256)",
      []
    );

    return new Market__marketFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_marketFees(): ethereum.CallResult<Market__marketFeesResult> {
    let result = super.tryCall(
      "marketFees",
      "marketFees():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__marketFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  marketUsers(param0: Address): Market__marketUsersResult {
    let result = super.call(
      "marketUsers",
      "marketUsers(address):(bool,bool,uint24)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Market__marketUsersResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toI32()
    );
  }

  try_marketUsers(
    param0: Address
  ): ethereum.CallResult<Market__marketUsersResult> {
    let result = super.tryCall(
      "marketUsers",
      "marketUsers(address):(bool,bool,uint24)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__marketUsersResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toI32()
      )
    );
  }

  placePrediction(
    _user: Address,
    _prediction: i32,
    _amount: BigInt,
    _leverage: i32
  ): BigInt {
    let result = super.call(
      "placePrediction",
      "placePrediction(address,uint8,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction)),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))
      ]
    );

    return result[0].toBigInt();
  }

  try_placePrediction(
    _user: Address,
    _prediction: i32,
    _amount: BigInt,
    _leverage: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "placePrediction",
      "placePrediction(address,uint8,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_prediction)),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_leverage))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pools(param0: BigInt): Market__poolsResult {
    let result = super.call(
      "pools",
      "pools(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Market__poolsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_pools(param0: BigInt): ethereum.CallResult<Market__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__poolsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  rewardPool(): BigInt {
    let result = super.call("rewardPool", "rewardPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardPool", "rewardPool():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settler(): Address {
    let result = super.call("settler", "settler():(address)", []);

    return result[0].toAddress();
  }

  try_settler(): ethereum.CallResult<Address> {
    let result = super.tryCall("settler", "settler():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userRewardPool(): BigInt {
    let result = super.call("userRewardPool", "userRewardPool():(uint256)", []);

    return result[0].toBigInt();
  }

  try_userRewardPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardPool",
      "userRewardPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winningPool(): i32 {
    let result = super.call("winningPool", "winningPool():(uint8)", []);

    return result[0].toI32();
  }

  try_winningPool(): ethereum.CallResult<i32> {
    let result = super.tryCall("winningPool", "winningPool():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _asset(): ConstructorCall_assetStruct {
    return this._call.inputValues[4].value.toTuple() as ConstructorCall_assetStruct;
  }

  get _marketTime(): ConstructorCall_marketTimeStruct {
    return this._call.inputValues[5].value.toTuple() as ConstructorCall_marketTimeStruct;
  }

  get _pools(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get _feesPercentage(): ConstructorCall_feesPercentageStruct {
    return this._call.inputValues[7].value.toTuple() as ConstructorCall_feesPercentageStruct;
  }

  get _LC(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_assetStruct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class ConstructorCall_marketTimeStruct extends ethereum.Tuple {
  get creationTime(): BigInt {
    return this[0].toBigInt();
  }

  get tradingEndTime(): BigInt {
    return this[1].toBigInt();
  }

  get waitingEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get reportingEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get disputeEndTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class ConstructorCall_feesPercentageStruct extends ethereum.Tuple {
  get creator(): BigInt {
    return this[0].toBigInt();
  }

  get settler(): BigInt {
    return this[1].toBigInt();
  }

  get platform(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimReturnsCall extends ethereum.Call {
  get inputs(): ClaimReturnsCall__Inputs {
    return new ClaimReturnsCall__Inputs(this);
  }

  get outputs(): ClaimReturnsCall__Outputs {
    return new ClaimReturnsCall__Outputs(this);
  }
}

export class ClaimReturnsCall__Inputs {
  _call: ClaimReturnsCall;

  constructor(call: ClaimReturnsCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimReturnsCall__Outputs {
  _call: ClaimReturnsCall;

  constructor(call: ClaimReturnsCall) {
    this._call = call;
  }

  get totalReturns(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get participationAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class PlacePredictionCall extends ethereum.Call {
  get inputs(): PlacePredictionCall__Inputs {
    return new PlacePredictionCall__Inputs(this);
  }

  get outputs(): PlacePredictionCall__Outputs {
    return new PlacePredictionCall__Outputs(this);
  }
}

export class PlacePredictionCall__Inputs {
  _call: PlacePredictionCall;

  constructor(call: PlacePredictionCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _prediction(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _leverage(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class PlacePredictionCall__Outputs {
  _call: PlacePredictionCall;

  constructor(call: PlacePredictionCall) {
    this._call = call;
  }

  get positions(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleMarketCall extends ethereum.Call {
  get inputs(): SettleMarketCall__Inputs {
    return new SettleMarketCall__Inputs(this);
  }

  get outputs(): SettleMarketCall__Outputs {
    return new SettleMarketCall__Outputs(this);
  }
}

export class SettleMarketCall__Inputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }

  get _settler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleMarketCall__Outputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }
}

export class SettleMarketExternalCall extends ethereum.Call {
  get inputs(): SettleMarketExternalCall__Inputs {
    return new SettleMarketExternalCall__Inputs(this);
  }

  get outputs(): SettleMarketExternalCall__Outputs {
    return new SettleMarketExternalCall__Outputs(this);
  }
}

export class SettleMarketExternalCall__Inputs {
  _call: SettleMarketExternalCall;

  constructor(call: SettleMarketExternalCall) {
    this._call = call;
  }

  get _settler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _winningPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleMarketExternalCall__Outputs {
  _call: SettleMarketExternalCall;

  constructor(call: SettleMarketExternalCall) {
    this._call = call;
  }
}
