// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get asset(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get assetFeed(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get decimals(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get assetFeedType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get creator(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MarketCreated extends ethereum.Event {
  get params(): MarketCreated__Params {
    return new MarketCreated__Params(this);
  }
}

export class MarketCreated__Params {
  _event: MarketCreated;

  constructor(event: MarketCreated) {
    this._event = event;
  }

  get assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creationTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pools(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get liquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketFactory__getAllAssetsResultValue0Struct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class MarketFactory__getAssetResultValue0Struct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class MarketFactory__getMarketDurationParamsResultValue0Struct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }
}

export class MarketFactory__getMarketsResultValue0Struct extends ethereum.Tuple {
  get marketAddress(): Address {
    return this[0].toAddress();
  }

  get asset(): MarketFactory__getMarketsResultValue0AssetStruct {
    return this[1].toTuple() as MarketFactory__getMarketsResultValue0AssetStruct;
  }

  get time(): MarketFactory__getMarketsResultValue0TimeStruct {
    return this[2].toTuple() as MarketFactory__getMarketsResultValue0TimeStruct;
  }

  get pools(): Array<MarketFactory__getMarketsResultValue0PoolsStruct> {
    return this[3].toTupleArray<
      MarketFactory__getMarketsResultValue0PoolsStruct
    >();
  }

  get phase(): i32 {
    return this[4].toI32();
  }
}

export class MarketFactory__getMarketsResultValue0AssetStruct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class MarketFactory__getMarketsResultValue0TimeStruct extends ethereum.Tuple {
  get creationTime(): BigInt {
    return this[0].toBigInt();
  }

  get tradingEndTime(): BigInt {
    return this[1].toBigInt();
  }

  get waitingEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get reportingEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get disputeEndTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class MarketFactory__getMarketsResultValue0PoolsStruct extends ethereum.Tuple {
  get upper(): BigInt {
    return this[0].toBigInt();
  }

  get lower(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get participants(): BigInt {
    return this[3].toBigInt();
  }

  get positions(): BigInt {
    return this[4].toBigInt();
  }

  get rewards(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketFactory__getMarketsResult {
  value0: Array<MarketFactory__getMarketsResultValue0Struct>;
  value1: BigInt;

  constructor(
    value0: Array<MarketFactory__getMarketsResultValue0Struct>,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MarketFactory__getOnGoingMarketsResultValue0Struct extends ethereum.Tuple {
  get marketAddress(): Address {
    return this[0].toAddress();
  }

  get asset(): MarketFactory__getOnGoingMarketsResultValue0AssetStruct {
    return this[1].toTuple() as MarketFactory__getOnGoingMarketsResultValue0AssetStruct;
  }

  get time(): MarketFactory__getOnGoingMarketsResultValue0TimeStruct {
    return this[2].toTuple() as MarketFactory__getOnGoingMarketsResultValue0TimeStruct;
  }

  get pools(): Array<MarketFactory__getOnGoingMarketsResultValue0PoolsStruct> {
    return this[3].toTupleArray<
      MarketFactory__getOnGoingMarketsResultValue0PoolsStruct
    >();
  }

  get phase(): i32 {
    return this[4].toI32();
  }
}

export class MarketFactory__getOnGoingMarketsResultValue0AssetStruct extends ethereum.Tuple {
  get assetName(): Bytes {
    return this[0].toBytes();
  }

  get assetFeed(): Address {
    return this[1].toAddress();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }

  get assetFeedType(): i32 {
    return this[3].toI32();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class MarketFactory__getOnGoingMarketsResultValue0TimeStruct extends ethereum.Tuple {
  get creationTime(): BigInt {
    return this[0].toBigInt();
  }

  get tradingEndTime(): BigInt {
    return this[1].toBigInt();
  }

  get waitingEndTime(): BigInt {
    return this[2].toBigInt();
  }

  get reportingEndTime(): BigInt {
    return this[3].toBigInt();
  }

  get disputeEndTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class MarketFactory__getOnGoingMarketsResultValue0PoolsStruct extends ethereum.Tuple {
  get upper(): BigInt {
    return this[0].toBigInt();
  }

  get lower(): BigInt {
    return this[1].toBigInt();
  }

  get staked(): BigInt {
    return this[2].toBigInt();
  }

  get participants(): BigInt {
    return this[3].toBigInt();
  }

  get positions(): BigInt {
    return this[4].toBigInt();
  }

  get rewards(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketFactory extends ethereum.SmartContract {
  static bind(address: Address): MarketFactory {
    return new MarketFactory("MarketFactory", address);
  }

  createMarket(
    _assetId: BigInt,
    _duration: BigInt,
    _pools: Array<BigInt>,
    _liquidity: BigInt
  ): Address {
    let result = super.call(
      "createMarket",
      "createMarket(uint256,uint256,uint256[],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetId),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigIntArray(_pools),
        ethereum.Value.fromUnsignedBigInt(_liquidity)
      ]
    );

    return result[0].toAddress();
  }

  try_createMarket(
    _assetId: BigInt,
    _duration: BigInt,
    _pools: Array<BigInt>,
    _liquidity: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createMarket",
      "createMarket(uint256,uint256,uint256[],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(_assetId),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigIntArray(_pools),
        ethereum.Value.fromUnsignedBigInt(_liquidity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllAssets(): Array<MarketFactory__getAllAssetsResultValue0Struct> {
    let result = super.call(
      "getAllAssets",
      "getAllAssets():((bytes32,address,uint8,uint8,bool)[])",
      []
    );

    return result[0].toTupleArray<
      MarketFactory__getAllAssetsResultValue0Struct
    >();
  }

  try_getAllAssets(): ethereum.CallResult<
    Array<MarketFactory__getAllAssetsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllAssets",
      "getAllAssets():((bytes32,address,uint8,uint8,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<MarketFactory__getAllAssetsResultValue0Struct>()
    );
  }

  getAsset(_assetId: BigInt): MarketFactory__getAssetResultValue0Struct {
    let result = super.call(
      "getAsset",
      "getAsset(uint256):((bytes32,address,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_assetId)]
    );

    return result[0].toTuple() as MarketFactory__getAssetResultValue0Struct;
  }

  try_getAsset(
    _assetId: BigInt
  ): ethereum.CallResult<MarketFactory__getAssetResultValue0Struct> {
    let result = super.tryCall(
      "getAsset",
      "getAsset(uint256):((bytes32,address,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as MarketFactory__getAssetResultValue0Struct
    );
  }

  getMarketDurationParams(): MarketFactory__getMarketDurationParamsResultValue0Struct {
    let result = super.call(
      "getMarketDurationParams",
      "getMarketDurationParams():((uint256,uint256))",
      []
    );

    return result[0].toTuple() as MarketFactory__getMarketDurationParamsResultValue0Struct;
  }

  try_getMarketDurationParams(): ethereum.CallResult<
    MarketFactory__getMarketDurationParamsResultValue0Struct
  > {
    let result = super.tryCall(
      "getMarketDurationParams",
      "getMarketDurationParams():((uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as MarketFactory__getMarketDurationParamsResultValue0Struct
    );
  }

  getMarketWindow(_windowType: i32, _duration: BigInt): BigInt {
    let result = super.call(
      "getMarketWindow",
      "getMarketWindow(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_windowType)),
        ethereum.Value.fromUnsignedBigInt(_duration)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMarketWindow(
    _windowType: i32,
    _duration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMarketWindow",
      "getMarketWindow(uint8,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_windowType)),
        ethereum.Value.fromUnsignedBigInt(_duration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarkets(
    _pageSize: BigInt,
    _offset: BigInt
  ): MarketFactory__getMarketsResult {
    let result = super.call(
      "getMarkets",
      "getMarkets(uint256,uint256):((address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pageSize),
        ethereum.Value.fromUnsignedBigInt(_offset)
      ]
    );

    return new MarketFactory__getMarketsResult(
      result[0].toTupleArray<MarketFactory__getMarketsResultValue0Struct>(),
      result[1].toBigInt()
    );
  }

  try_getMarkets(
    _pageSize: BigInt,
    _offset: BigInt
  ): ethereum.CallResult<MarketFactory__getMarketsResult> {
    let result = super.tryCall(
      "getMarkets",
      "getMarkets(uint256,uint256):((address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pageSize),
        ethereum.Value.fromUnsignedBigInt(_offset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketFactory__getMarketsResult(
        value[0].toTupleArray<MarketFactory__getMarketsResultValue0Struct>(),
        value[1].toBigInt()
      )
    );
  }

  getOnGoingMarkets(): Array<
    MarketFactory__getOnGoingMarketsResultValue0Struct
  > {
    let result = super.call(
      "getOnGoingMarkets",
      "getOnGoingMarkets():((address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)[])",
      []
    );

    return result[0].toTupleArray<
      MarketFactory__getOnGoingMarketsResultValue0Struct
    >();
  }

  try_getOnGoingMarkets(): ethereum.CallResult<
    Array<MarketFactory__getOnGoingMarketsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOnGoingMarkets",
      "getOnGoingMarkets():((address,(bytes32,address,uint8,uint8,bool),(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256,uint256)[],uint8)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketFactory__getOnGoingMarketsResultValue0Struct
      >()
    );
  }

  getTotalMarkets(): BigInt {
    let result = super.call(
      "getTotalMarkets",
      "getTotalMarkets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalMarkets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalMarkets",
      "getTotalMarkets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _marketWindowParams(): ConstructorCall_marketWindowParamsStruct {
    return this._call.inputValues[1].value.toTuple() as ConstructorCall_marketWindowParamsStruct;
  }

  get _marketDurationParams(): ConstructorCall_marketDurationParamsStruct {
    return this._call.inputValues[2].value.toTuple() as ConstructorCall_marketDurationParamsStruct;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_marketWindowParamsStruct extends ethereum.Tuple {
  get WW(): BigInt {
    return this[0].toBigInt();
  }

  get RW(): BigInt {
    return this[1].toBigInt();
  }

  get DW(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConstructorCall_marketDurationParamsStruct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get _asset(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _assetFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _assetFeedType(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }
}

export class CreateMarketCall extends ethereum.Call {
  get inputs(): CreateMarketCall__Inputs {
    return new CreateMarketCall__Inputs(this);
  }

  get outputs(): CreateMarketCall__Outputs {
    return new CreateMarketCall__Outputs(this);
  }
}

export class CreateMarketCall__Inputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get _assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _pools(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateMarketCall__Outputs {
  _call: CreateMarketCall;

  constructor(call: CreateMarketCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SettleMarketCall extends ethereum.Call {
  get inputs(): SettleMarketCall__Inputs {
    return new SettleMarketCall__Inputs(this);
  }

  get outputs(): SettleMarketCall__Outputs {
    return new SettleMarketCall__Outputs(this);
  }
}

export class SettleMarketCall__Inputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }

  get _market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleMarketCall__Outputs {
  _call: SettleMarketCall;

  constructor(call: SettleMarketCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMarketDurationParamsCall extends ethereum.Call {
  get inputs(): UpdateMarketDurationParamsCall__Inputs {
    return new UpdateMarketDurationParamsCall__Inputs(this);
  }

  get outputs(): UpdateMarketDurationParamsCall__Outputs {
    return new UpdateMarketDurationParamsCall__Outputs(this);
  }
}

export class UpdateMarketDurationParamsCall__Inputs {
  _call: UpdateMarketDurationParamsCall;

  constructor(call: UpdateMarketDurationParamsCall) {
    this._call = call;
  }

  get _marketDurationParams(): UpdateMarketDurationParamsCall_marketDurationParamsStruct {
    return this._call.inputValues[0].value.toTuple() as UpdateMarketDurationParamsCall_marketDurationParamsStruct;
  }
}

export class UpdateMarketDurationParamsCall__Outputs {
  _call: UpdateMarketDurationParamsCall;

  constructor(call: UpdateMarketDurationParamsCall) {
    this._call = call;
  }
}

export class UpdateMarketDurationParamsCall_marketDurationParamsStruct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }
}

export class UpdateMarketWindowParamsCall extends ethereum.Call {
  get inputs(): UpdateMarketWindowParamsCall__Inputs {
    return new UpdateMarketWindowParamsCall__Inputs(this);
  }

  get outputs(): UpdateMarketWindowParamsCall__Outputs {
    return new UpdateMarketWindowParamsCall__Outputs(this);
  }
}

export class UpdateMarketWindowParamsCall__Inputs {
  _call: UpdateMarketWindowParamsCall;

  constructor(call: UpdateMarketWindowParamsCall) {
    this._call = call;
  }

  get _windowType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMarketWindowParamsCall__Outputs {
  _call: UpdateMarketWindowParamsCall;

  constructor(call: UpdateMarketWindowParamsCall) {
    this._call = call;
  }
}
